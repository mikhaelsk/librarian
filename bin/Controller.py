from .views import *
from .models import *
from .utils import *
import sys
import os.path
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import (QAction, QActionGroup, QApplication, QFrame,
        QLabel, QMainWindow, QMenu, QMessageBox, QSizePolicy, QVBoxLayout,
        QWidget, QFileSystemModel, QAbstractItemView)

'''
main UI class inherited from the autogenerated by pyuic5 uimain.ui -o uimain.py
'''
class LibrarianMainWindow( Ui_MainWindow ):
        
    def __init__( self, window, mainController ):
        self.controller = mainController
        self.controller.SetMainWindow( self )
        ui = Ui_MainWindow()
        Ui_MainWindow.__init__( self )
        self.setupUi( window )
        self.inputPathLine.returnPressed.connect( self.AddFolder )
        self.inputPathLine.returnPressed.connect( self.AddFile )
        self.inputTagLine.returnPressed.connect( self.HandleAddTag )
        self.controller.FinalizeInit()
      
        #self.addTagButton.clicked.connect(self.inputTagLine.update)
        #self.deleteTagButton.pressed.connect(self.listView.update)
        #self.inputTagFilter.returnPressed.connect(self.columnView.update)

    def setupUi( self, MainWindow ):
        super().setupUi( MainWindow )
        self.addFolderButton.clicked.connect( self.AddFolder )
        self.addFileButton.clicked.connect( self.AddFile )
        self.exitButton.triggered.connect( self.HandleClose )
        self.addTagButton.clicked.connect( self.HandleAddTag )
        self.deleteTagButton.clicked.connect( self.HandleDelTag )
        self.listView.setSelectionMode( QAbstractItemView.ExtendedSelection )
  
    '''
    Slots for signals:
    '''
    def AddFolder( self ):
        self.controller.AddFolder( self.inputPathLine.text() )
    
    def AddFile( self ):
        self.controller.AddFile( self.inputPathLine.text() )    

    def HandleClose( self ):
        self.controller.SaveModel()

    def HandleAddTag( self ):
        self.controller.AddTag( self.inputTagLine.text() )
        #self.listView.update()

    def HandleDelTag( self ):
        self.controller.DelTag( self.listView.selectedIndexes() )


class Controller():
    def __init__( self ):
        self.logger = Logger()        
        self.model = MainModel( self )
        self.tags = Tags( self )
        self.logger.WriteToLog( "Init Done\n" )

    def FinalizeInit( self ):
        self.mainwindow.treeView.setModel( self.model.library )
        self.mainwindow.listView.setModel( self.tags.tagModel )

    def PrintToLog( self, txt ):
        self.logger.WriteToLog( txt )

    def SetMainWindow( self, newMainWindow ):
        self.mainwindow = newMainWindow
        #self.mainwindow.columnView.setModel( self.model.library.root.Children)

    def UpdateLibraryView( self ):
        self.mainwindow.columnView.update()

    def AddFolder( self, txt ):
        if os.path.isdir( txt ):
            self.logger.WriteToLog( 'Added new path: ' + txt )
            self.model.AddFolder( txt )  
        self.mainwindow.numOfDocsLabel.setText( str( self.model.numberOfDocs ) )
    
    def AddFile( self, txt ):
        if os.path.isfile( txt ):
            self.logger.WriteToLog( 'Added new path: ' + txt )
            self.model.AddFile( txt )  
        self.mainwindow.numOfDocsLabel.setText( str( self.model.numberOfDocs ) )
    
    def SaveModel( self ):
        self.tags.SaveTagModel()

    def AddTag( self, txt ):
        self.tags.AddTag( txt )

    def DelTag( self, selectedItemIndexes ):
        self.tags.DelTag( selectedItemIndexes )


